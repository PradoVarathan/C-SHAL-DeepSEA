install.packages("tidyverse")
#install.packages("tidyverse")
library(tidyverse)
#install.packages("tidyverse")
library("tidyverse")
install.packages(c("tidyr","readr","tibble","ggplot2"))
#install.packages("tidyverse")
library("tidyverse")
install.packages("tidyverse")
library("tidyverse")
install.packages("magrittr")
library("magrittr")
library("tidyverse")
install.packages("tidyverse")
library("tidyverse")
library(magrittr)
library(tidyverse)
library("tidyverse", lib.loc="~/R/win-library/4.0")
library("tidyr", lib.loc="~/R/win-library/4.0")
library("tidyselect", lib.loc="~/R/win-library/4.0")
install.packages(c("openxlsx", "quantreg", "R6"))
library("tidyverse", lib.loc="~/R/win-library/4.0")
install.packages("tidyverse", dependencies = TRUE)
library("tidyverse")
install.packages("tidyverse", dependencies = TRUE, lib = "C:\Users/ppugale/AppData/Local/Temp/RtmpA1E0Al/downloaded_packages/")
install.packages("tidyverse", dependencies = TRUE, lib = "C:/Users/ppugale/AppData/Local/Temp/RtmpA1E0Al/downloaded_packages/")
library("tidyverse")
BiocManager::install("GEOquery")
BiocManager::install("limma")
library(limma)
BiocManager::install("DESeq")
BiocManager::install("DESeq2")
library(egeR)
library(edgeR)
library("edgeR")
BiocManager::install("edgeR")
library("edgeR")
BiocManager::install("QuasiSeq")
library("QuasiSeq")
BiocManager::install("airway")
library("airway")
data("airway")
library(DESeq2)
library(limma)
BiocManager::install(c("seqgendiff","SummarizedExperiment","DESeq2","sva","qvalue"))
library(seqgendiff)
library(SummarizedExperiment)
library(DESeq2)
library(limma)
library(sva)
library(qvalue)
library(qvalue)
library(devtools)
devtools::install_github("chr1swallace/simGWAS")
install.packages("devtools") # if not already installed
devtools::install_github("chr1swallace/simGWAS")
library(simGWAS)
install.packages("Rtools")
install.packages("devtools") # if not already installed
install.packages("devtools")
install.packages("devtools") # if not already installed
devtools::install_github("chr1swallace/simGWAS")
BiocManager::install("simGWAS")
devtools::install_github("chr1swallace/simGWAS")
library("airway")
data("airway")
library(seqgendiff)
library(SummarizedExperiment)
library(DESeq2)
library(limma)
library(sva)
library(qvalue)
library(seqgendiff)
library(SummarizedExperiment)
BiocManager::install("DESeq2")
libpaths()
.libPaths()
myPaths = .libPaths()
myPaths = c(myPaths[2],myPaths[1])
.libPaths(myPaths)
.libPaths()
BiocManager::install("DESeq2")
BiocManager::install("GEOquery")
library(GEOquery)
library("GEOquery", lib.loc="~/R/win-library/4.0")
library(dplyr)
library(GEOquery)
library(dplyr)
library(GEOquery)
library("airway")
data("airway")
library(GEOquery)
BiocManager::install("GEOquery")
library(GEOquery)
RR.vR.version
R.version
library(GEOquery)
GEOquery
# Importing packages required for all analysis
library(GEOquery)
# Making the normalization methods from packages and coding by self
normalization_methods = list('DESeq2' = NA,
'PoissonSeq' = NA,
'TMM' = tmm, #edgeR and QuasiSeq
'RPKM' = rpkm,
'UQ' = uqua)
normalization_methods$DESeq2 = function(expression_set){
temp = expression_set
psuedo_ref_sample = col_multiply(expression_set)
normalization_factor_matrix = sweep(expression_set,FUN="/",MARGIN=1,STATS=psuedo_ref_sample)
normalization_factor_matrix[is.na(normalization_factor_matrix)] = 1
normalization_factor_matrix[normalization_factor_matrix == Inf] = 0
medians_list = c()
for (col in 1:ncol(normalization_factor_matrix)){
medians_list = c(medians_list, median(normalization_factor_matrix[,col]))
temp[,col] = temp[,col]/medians_list[col]
}
return(temp)
}
normalization_methods$DESeq2 = function(expression_set){
temp = expression_set
psuedo_ref_sample = col_multiply(expression_set)
normalization_factor_matrix = sweep(expression_set,FUN="/",MARGIN=1,STATS=psuedo_ref_sample)
normalization_factor_matrix[is.na(normalization_factor_matrix)] = 1
normalization_factor_matrix[normalization_factor_matrix == Inf] = 0
medians_list = c()
for (col in 1:ncol(normalization_factor_matrix)){
medians_list = c(medians_list, median(normalization_factor_matrix[,col]))
temp[,col] = temp[,col]/medians_list[col]
}
return(temp)
}
col_multiply = function(eset){
result = matrix(data = 1,ncol=1,nrow=nrow(eset))
for (column in 1:ncol(eset)){
result = result*eset[,column]
}
result = result^(1/ncol(eset))
return(result)
}
DESeq2 = function(expression_set){
temp = expression_set
psuedo_ref_sample = col_multiply(expression_set)
normalization_factor_matrix = sweep(expression_set,FUN="/",MARGIN=1,STATS=psuedo_ref_sample)
normalization_factor_matrix[is.na(normalization_factor_matrix)] = 1
normalization_factor_matrix[normalization_factor_matrix == Inf] = 0
medians_list = c()
for (col in 1:ncol(normalization_factor_matrix)){
medians_list = c(medians_list, median(normalization_factor_matrix[,col]))
temp[,col] = temp[,col]/medians_list[col]
}
return(temp)
}
PoissonSeq = function(expression_set,subject_list){
data_set = list(n=expression_set,y=subject_list)
temp = expression_set
normalization_factor_list = PoissonSeq::PS.Est.Depth(data_set$n)
for (col in 1:ncol(expression_set)){
temp[,col] = temp[,col]/normalization_factor_list[col]
}
return(temp)
}
library(tidyverse)
require(tidyverse)
\
require(tidyverse)
library(tidyverse)
top2000 = read.csv("DeepSEA_Lab/Top2000_SNPs_IGAP.csv",header = T)
library(biomaRT)
install.packages("BiocManager")
install.packages("biomaRt")
BiocManager::install("biomaRt")
library(biomaRT)
library(biomart)
library(biomaRt)
snp_mart = useMart(biomart="ENSEMBL_MART_SNP", host="grch37.ensembl.org", path="/biomart/martservice", dataset="hsapiens_snp")
head(top2000)
top2000_test = top2000[,c('SNP','A1')]
test <- getBM(attributes = c('chr_name','start','end'),
filters = c('refsnp_id','allele'),
values = top2000_test,
mart = snpmart)
filterOptions(snp_mart)
test <- getBM(attributes = c('chr_name','start','end'),
filters = c('refsnp_id','allele'),
values = top2000_test,
mart = snp_mart)
test <- getBM(attributes = c('chr_name','start','end'),
filters = c('refsnp_id','allele'),
values = top2000_test,
mart = snp_mart)
test <- getBM(attributes = c('chr_name','start','end'),
filters = c('refsnp_id','allele'),
values = top2000_test,
mart = snp_mart)
library(dplyr)
test <- getBM(attributes = c('chr_name','start','end'),
filters = c('refsnp_id','allele'),
values = top2000_test,
mart = snp_mart)
detach("package:dplyr", unload=TRUE)
library(biomaRt)
snp_mart = useMart(biomart="ENSEMBL_MART_SNP", host="grch37.ensembl.org", path="/biomart/martservice", dataset="hsapiens_snp")
test <- getBM(attributes = c('chr_name','start','end'),
filters = c('refsnp_id','allele'),
values = top2000_test,
mart = snp_mart)
dplyr::filter_()
listFilters(snp_mart)
listAttributes(snp_mart)
test <- getBM(attributes = c('chr_name','chrom_start','chrom_end'),
filters = c('snp_filter'),
values = top2000_test,
mart = snp_mart)
top2000_test
top2000_test = top2000$SNP
test <- getBM(attributes = c('chr_name','chrom_start','chrom_end'),
filters = c('snp_filter'),
values = top2000_test,
mart = snp_mart)
library(dplyr)
test <- getBM(attributes = c('chr_name','chrom_start','chrom_end'),
filters = c('snp_filter'),
values = top2000_test,
mart = snp_mart)
test <- getBM(attributes = c('chr_name','chrom_start','chrom_end'),
filters = c('snp_filter'),
values = top2000_test,
mart = snp_mart, useCache = FALSE)
test
test <- getBM(attributes = c('refsnp_id','chr_name','chrom_start','chrom_end'),
filters = c('snp_filter'),
values = top2000_test,
mart = snp_mart)
test <- getBM(attributes = c('refsnp_id','chr_name','chrom_start','chrom_end'),
filters = c('snp_filter'),
values = top2000_test,
mart = snp_mart,useCache = F)
head(test)
colnames(test$refsnp_id) = "SNP"
colnames(test$refsnp_id) = c("SNP")
colnames(test[,1]) = c("SNP")
colnames(test) = c("SNP","CHR","BP","BP")
test = test[,1:3]
head(test)
test= merge(test,top2000,by="SNP")
head(test)
write.csv(test,"DeepSEA_Lab/Top2000_ss_file",sep=" ")
write.csv(test,"DeepSEA_Lab/Top2000_ss_file",row.names = F,quote = F)
sessionInfo()
# gwas_2000 = gwas[1:2000,]
# colnames(gwas_2000) = c("SNP","A1","A2","FREQ","B","SE","P")
# library(biomaRt)
# snpmart = useMart(biomart="ENSEMBL_MART_SNP", host="grch37.ensembl.org", path="/biomart/martservice", dataset="hsapiens_snp")
# listAttributes(snpmart)
# listFilters(snpmart)
# test <- getBM(attributes = c('refsnp_id','chr_name','chrom_start'), filters = c('snp_filter'), values = list(gwas_2000$SNP), mart = snpmart,useCache = FALSE)
# colnames(test) = c("SNP","CHR","BP")
# gwas_2000 = merge(gwas_2000,test,by = "SNP")
# write.csv(gwas_2000,"Top_2000_IGAP_SNPs.csv",quote = F,row.names = F)
gwas_2000 = read.csv("Top_2000_IGAP_SNPs.csv",header = T)
setwd("ClusterData/")
# gwas_2000 = gwas[1:2000,]
# colnames(gwas_2000) = c("SNP","A1","A2","FREQ","B","SE","P")
# library(biomaRt)
# snpmart = useMart(biomart="ENSEMBL_MART_SNP", host="grch37.ensembl.org", path="/biomart/martservice", dataset="hsapiens_snp")
# listAttributes(snpmart)
# listFilters(snpmart)
# test <- getBM(attributes = c('refsnp_id','chr_name','chrom_start'), filters = c('snp_filter'), values = list(gwas_2000$SNP), mart = snpmart,useCache = FALSE)
# colnames(test) = c("SNP","CHR","BP")
# gwas_2000 = merge(gwas_2000,test,by = "SNP")
# write.csv(gwas_2000,"Top_2000_IGAP_SNPs.csv",quote = F,row.names = F)
gwas_2000 = read.csv("Top_2000_IGAP_SNPs.csv",header = T)
# BiocManager::install("QUBIC")
library("QUBIC")
BiocManager::install("QUBIC")
# BiocManager::install("QUBIC")
library("QUBIC")
results = read.csv("Results_Actual.csv",header = T)
row.names(results) = results$X
results$X = NULL
# BiCluster - QUBIC -------------------------------------------------------
results_mt = as.matrix(results)
RSID_Names = rownames(results_mt)
CHMATIN_Names = colnames(results_mt)
#results_mt = qudiscretize(results_mt)
results_mt[1:5,1:5]
res <- biclust::biclust(results_mt, method = BCQUD(),verbose = TRUE)
summary(res)
