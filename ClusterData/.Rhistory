for (i in 1:8){
quheatmap(results_mt, res,number = sig_res$ClusterNum[i], col = hmcols, showlabel = TRUE)
}
dev.off()
par(mfrow=c(2,4))
for (i in 1:8){
quheatmap(results_mt, res,number = sig_res$ClusterNum[i], col = hmcols, showlabel = TRUE)
}
par(mfrow=c(2,4))
for (i in 9:17){
quheatmap(results_mt, res,number = sig_res$ClusterNum[i], col = hmcols, showlabel = TRUE)
}
min(results)
max(results)
res_temp = abs(results)
max(res_temp)
min(results)
min(res_temp)
6.01196*20
6.01196*0.8
length(res_temp)
dim(res_temp)
res_temp = res_temp[which(res_temp > max(res_temp)*0.8)]
which(res_temp > max(res_temp)*0.8)
res_temp = res_temp[which(res_temp > max(res_temp)*0.8),]
res_temp
res_temp = abs(results)
res_temp_logi = res_temp > max(res_temp)*0.8
res_temp_logi
res_temp = res_temp[res_temp_logi]
res_temp_logi = res_temp > max(res_temp)*0.5
res_temp = abs(results)
res_temp_logi = res_temp > max(res_temp)*0.5
res_temp = res_temp[res_temp_logi]
res_temp = abs(results)
res_temp_logi = res_temp > max(res_temp)*0.5
res_temp = res_temp*res_temp_logi
View(res_temp)
max(res_temp)
res_temp = abs(results)
res_temp_logi = res_temp > max(res_temp)*0.2
res_temp = res_temp*res_temp_logi
res_temp
pheatmap::pheatmap(res_temp)
heatmap(res_temp)
res_temp = results*res_temp_logi
nrow(res_temp)
sum(res_temp[1,])
for (i in 1:nrow(res_temp)){
if (sum(res_temp[i,]) == 0){
res_temp[i,] = NULL
}
}
res_temp[i,] = NA
for (i in 1:nrow(res_temp)){
if (sum(res_temp[i,]) == 0){
res_temp[i,] = NA
}
}
res_temp = abs(results)
res_temp_logi = res_temp > max(res_temp)*0.2
res_temp = results*res_temp_logi
head(res_temp)
for (i in 1:nrow(res_temp)){
if (sum(res_temp[i,]) == 0){
res_temp[i,] = NA
}
}
dim(res_temp)
na.omit(res_temp)
res_temp=na.omit(res_temp)
dim(res_temp)
res_temp = abs(results)
res_temp_logi = res_temp > max(res_temp)*0.2
res_temp = results*res_temp_logi
for (i in 1:nrow(res_temp)){
if (sum(res_temp[i,]) == 0){
res_temp[i,] = NA
}
}
for (i in 1:ncol(res_temp)){
if (sum(res_temp[,i]) == 0){
res_temp[,i] = NA
}
}
for (i in 1:ncol(res_temp)){
if (sum(res_temp[,i]) == 0){
res_temp[,i] = NA
}
}
sum(res_temp[,i]) == 0
if (sum(res_temp[,i]) > 0){
res_temp[,i] = NA
}
for (i in 1:ncol(res_temp)){
if (sum(res_temp[,i]) < 0 || sum(res_temp[,i])==NA){
res_temp[,i] = NA
}
}
for (i in 1:ncol(res_temp)){
if ((sum(res_temp[,i]) < 0) || (sum(res_temp[,i]) == NA)){
res_temp[,i] = NA
}
}
(sum(res_temp[,i]) < 0) || (sum(res_temp[,i]) == NA)
for (i in 1:ncol(res_temp)){
try (sum(res_temp[,i]) == 0){
res_temp[,i] = NA
}
}
for (i in 1:ncol(res_temp)){
try (sum(res_temp[,i]) == 0){
res_temp[,i] = NA
}
}
?try()
for (i in 1:ncol(res_temp)){
temp_func = function(i){
if(sum(res_temp[,i]) == 0){
res_temp[,i] = NA
}
}
try(temp_func(i))
}
res_temp=na.omit(res_temp)
dim(res_temp)
res_temp = abs(results)
res_temp_logi = res_temp > max(res_temp)*0.2
res_temp = results*res_temp_logi
for (i in 1:nrow(res_temp)){
if (sum(res_temp[i,]) == 0){
res_temp[i,] = NA
}
}
res_temp = na.omit(res_temp)
dim(res_temp)
res_temp_r = na.omit(res_temp)
dim(res_temp_r)
res_temp = abs(results)
res_temp_logi = res_temp > max(res_temp)*0.2
res_temp = results*res_temp_logi
for (i in 1:ncol(res_temp)){
if (sum(res_temp[,i]) == 0){
res_temp[,i] = NA
}
}
res_temp_c = na.omit(res_temp)
dim(res_temp_c)
res_temp_r = na.omit(res_temp)
dim(res_temp_r)
res_temp = abs(results)
res_temp_logi = res_temp > max(res_temp)*0.2
res_temp = results*res_temp_logi
for (i in 1:nrow(res_temp)){
if (sum(res_temp[i,]) == 0){
res_temp[i,] = NA
}
}
res_temp_r = na.omit(res_temp)
dim(res_temp_r)
res_temp = abs(results)
res_temp_logi = res_temp > max(res_temp)*0.5
res_temp = results*res_temp_logi
for (i in 1:nrow(res_temp)){
if (sum(res_temp[i,]) == 0){
res_temp[i,] = NA
}
}
res_temp_r = na.omit(res_temp)
dim(res_temp_r)
library(pheatmap)
pheatmap(res_temp_r)
for (i in 1:ncol(res_temp_r)){
if (sum(res_temp_r[,i]) == 0){
res_temp_r[,i] = NA
}
}
res_temp_r = na.omit(res_temp)
library(pheatmap)
dim(res_temp_r)
pheatmap(res_temp_r)
res_temp_r = na.omit(res_temp_r)
library(pheatmap)
dim(res_temp_r)
for (i in 1:ncol(res_temp_r)){
if (sum(res_temp_r[,i]) == 0){
res_temp_r[,i] = NA
}
}
res_temp_r = na.omit(res_temp_r)
library(pheatmap)
dim(res_temp_r)
res_temp = abs(results)
res_temp_logi = res_temp > max(res_temp)*0.5
res_temp = results*res_temp_logi
for (i in 1:nrow(res_temp)){
if (sum(res_temp[i,]) == 0){
res_temp[i,] = NA
}
}
res_temp_r = na.omit(res_temp)
for (i in 1:ncol(res_temp_r)){
if (sum(res_temp_r[,i]) == 0){
res_temp_r[,i] = NULL
}
}
for (i in 1:ncol(res_temp_r)){
if (sum(res_temp_r[,i]) == 0){
res_temp_r[,i] = NULL
}
}
dim(res_temp_r)
pheatmap(res_temp_r)
heatmap(res_temp_r)
heatmap(as.matrix(res_temp_r))
res_temp = abs(results)
res_temp_logi = res_temp > max(res_temp)*0.35
res_temp = results*res_temp_logi
for (i in 1:nrow(res_temp)){
if (sum(res_temp[i,]) == 0){
res_temp[i,] = NA
}
}
res_temp_r = na.omit(res_temp)
for (i in 1:ncol(res_temp_r)){
if (sum(res_temp_r[,i]) == 0){
res_temp_r[,i] = NULL
}
}
res_temp_r = na.omit(res_temp_r)
library(pheatmap)
dim(res_temp_r)
pheatmap(res_temp_r)
heatmap(res_temp_r)
heatmap(as.matrix(res_temp_r))
229*640/1660*919
(229*640)/(1660*919)
snps_3 = get_snp_list(res,CHMATIN_Names,90,RSID_Names)
crms_3 = get_crms_list(res,CHMATIN_Names,90,RSID_Names)
snps_6 = get_snp_list(res,CHMATIN_Names,84,RSID_Names)
crms_6 = get_crms_list(res,CHMATIN_Names,84,RSID_Names)
# BiocManager::install("remotes", dependencies=T)
# BiocManager::install("hfang-bristol/XGR", dependencies=T)
library(XGR)
library(RCircos)
# Cluster3
XGR_3 = xEnricherSNPs(snps_3,include.LD = 'EUR')
genes_3 = xSNP2nGenes(snps_3)
view_3 = xEnrichViewer(XGR_3)
ld_scores_3 = xSNPscores(snps_3)
social_snps_3 = xSocialiserSNPs(snps_3)
summary(res)
res <- biclust::biclust(results_mt, method = BCQU(),verbose = TRUE)
summary(res)
#results_mt = qudiscretize(results_mt)
results_mt[1:5,1:5]
quheatmap(results_mt, res, number = 1, showlabel = TRUE)
library(RColorBrewer)
paleta <- colorRampPalette(rev(brewer.pal(11, "RdYlBu")))(11)
quheatmap(results_mt, res, number = c(90,84), showlabel = TRUE, col = paleta)
hmcols <- colorRampPalette(rev(c("#D73027", "#FC8D59", "#FEE090", "#FFFFBF",
"#E0F3F8", "#91BFDB", "#4575B4")))(100)
par(mar = c(4, 5, 3, 5) + 0.1)
quheatmap(results_mt, res,number = c(3,6), col = hmcols, showlabel = TRUE)
# Checking_Average_PValue -------------------------------------------------
library(QUBIC)
library(biclust)
check_average_sig = function(res_obj,gwas_obj,cluster_number,label_rsid){
ids_cols = biclusternumber(res_obj,cluster_number)[[1]]$Cols
ids_rows = biclusternumber(res_obj,cluster_number)[[1]]$Rows
gwas_res = gwas_obj[which(gwas_obj$SNP %in% label_rsid[ids_rows]),]
avg_p = mean(gwas_res$P)
avg_se = mean(gwas_res$SE)
return(c(avg_p,avg_se))
}
get_snp_list = function(res_obj,labels_crm,cluster_number,label_rsid){
ids_cols = biclusternumber(res_obj,cluster_number)[[1]]$Cols
ids_rows = biclusternumber(res_obj,cluster_number)[[1]]$Rows
snps = label_rsid[ids_rows]
chrms = labels_crm[ids_cols]
return(snps)
}
get_crms_list = function(res_obj,labels_crm,cluster_number,label_rsid){
ids_cols = biclusternumber(res_obj,cluster_number)[[1]]$Cols
ids_rows = biclusternumber(res_obj,cluster_number)[[1]]$Rows
snps = label_rsid[ids_rows]
chrms = labels_crm[ids_cols]
return(chrms)
}
get_snp_p_vals = function(snp_list,gwas){
gwas_res = gwas[which(gwas$SNP %in% snp_list),c('SNP','P')]
return(gwas_res)
}
p_vals = c()
se_vals = c()
for (i in 1:res@Number){
print(i)
temp = check_average_sig(res,gwas_2000,i,RSID_Names)
p_vals = c(p_vals,temp[1])
se_vals = c(se_vals,temp[2])
}
sig_res = data.frame("ClusterNum"=1:res@Number,"Avg_P" = p_vals,"Avg_SE"=se_vals)
library(ggplot2)
ggplot(sig_res) +
geom_bar( aes(x=ClusterNum, y=Avg_P), stat="identity", fill="skyblue", alpha=0.7)
sig_res = sig_res %>% arrange(Avg_P)
jpeg("All_Clusters.jpeg")
par(mfrow=c(2,4))
for (i in 1:8){
quheatmap(results_mt, res,number = sig_res$ClusterNum[i], col = hmcols, showlabel = TRUE)
}
dev.off()
par(mfrow=c(2,4))
for (i in 1:8){
quheatmap(results_mt, res,number = sig_res$ClusterNum[i], col = hmcols, showlabel = TRUE)
}
snps_3 = get_snp_list(res,CHMATIN_Names,34,RSID_Names)
crms_3 = get_crms_list(res,CHMATIN_Names,34,RSID_Names)
# BiocManager::install("remotes", dependencies=T)
# BiocManager::install("hfang-bristol/XGR", dependencies=T)
library(XGR)
library(RCircos)
# Cluster3
XGR_3 = xEnricherSNPs(snps_3,include.LD = 'EUR')
genes_3 = xSNP2nGenes(snps_3)
view_3 = xEnrichViewer(XGR_3)
view_3
ld_scores_3 = xSNPscores(snps_3)
ld_scores_3 = xSNPscores(data.frame("SNP"=snps_3,"P"=gwas_2000$P[which(gwas_2000$SNP %in% snps_3)]))
data = data.frame("SNP"=snps_3,"P"=gwas_2000$P[which(gwas_2000$SNP %in% snps_3)])
gwas_2000$P[which(gwas_2000$SNP %in% snps_3)]
length(gwas_2000$P[which(gwas_2000$SNP %in% snps_3)])
gwas_2000$NP[which(gwas_2000$SNP %in% snps_3)]
gwas_2000$SNP[which(gwas_2000$SNP %in% snps_3)]
unique(gwas_2000$SNP[which(gwas_2000$SNP %in% snps_3)])
data = data.frame("SNP"=gwas_2000$SNP[which(gwas_2000$SNP %in% snps_3)],"P" = gwas_2000$P[which(gwas_2000$SNP %in% snps_3)])
ld_scores_3 = xSNPscores(data)
ld_scores_3
social_snps_3 = xSocialiserSNPs(snps_3)
xCircos(social_snps_3)
xSocialiserDAGplot(social_snps_3)
xEnrichChord(XGR_3)
snps_genes_con_ld_3 = xSubneterSNPs(data)
plot(snps_genes_con_ld_3)
snps_genes_con_ld_3
write.csv(view_3,"XGR_Clus34.csv",quote=F,row.names = F)
write.csv(ld_scores_3,"LD_Scores_Clus34.csv",quote = F,row.names = F)
View(view_6)
View(view_3)
View(social_snps_3)
View(snps_genes_con_ld_3)
View(snps_genes_con_ld)
View(ld_scores_3)
unique(crms_3)
ChiaKaruturi(results_mt,res,34)
computeObservedFstat(results_mt,res,34)
signVariance(results_mt,res,34)
constantVariance(results_mt,res,34)
ChiaKaruturi(t(results_mt),res,34)
grepl("DNase",crms_3)
sum(grepl("DNase",crms_3))
218-125
labels = read.csv("~/Documents/GitHub/C-SHAL-DeepSEA/Data/Labels.csv")
head(labels)
labels$Type = c("DNase"*125,"TF"*690,"Histones"*104)
DNAse*125
"DNAse"*125
rep("DNAse",125)
labels$Type = c(rep("DNase",125),rep("TF",690),rep("Histones",104))
labels = labels[which(labels$Label_Name) %in% crms_3]
labels = labels[which(labels$Label_Name %in% crms_3),]
unique(labels$Type)
View(labels)
length(unique(crms_3))
crms_3
labels = read.csv("~/Documents/GitHub/C-SHAL-DeepSEA/Data/Labels.csv")
labels[-125:-1,]
690+125
labels[815:919,]
crms_3
labels = labels[which(labels$Label_Name %like% crms_3),]
snps_3 %in% "rs3851179"
which(gwas_2000$SNP == "rs3851179")
gwas_2000[1182,]
quheatmap(results_mt, res,number = 34, col = hmcols, showlabel = TRUE)
par(mar = c(4, 5, 3, 5) + 0.1)
quheatmap(results_mt, res,number = 34, col = hmcols, showlabel = TRUE)
library(biomaRt)
grch37.snp = useMart(biomart="ENSEMBL_MART_SNP", host="grch37.ensembl.org", path="/biomart/martservice",dataset="hsapiens_snp")
library(biomaRt)
grch37.snp = useMart(biomart="ENSEMBL_MART_SNP", host="grch37.ensembl.org", path="/biomart/martservice",dataset="hsapiens_snp")
listAttributes()
listAttributes(grch37.snp)
listFilters(grch37.snp)
geneList = c("APP","BACE1", "CASP6", "CASP8", "CSK", "CTNNA1", "GSTP1", "MEF2C", "NCSTN", "NFKB1", "PRKCB",
"PRKCG", "PRKCQ", "PSEN1", "PSEN2", "PTK2B", "RAD21", "SPI1", "USF1", "VTN")
library(biomaRt)
mart <- useMart(biomart = "ENSEMBL_MART_ENSEMBL", dataset = "hsapiens_gene_ensembl")
attributes = c('ensembl_gene_id','hgnc_symbol','entrezgene_id')
converted_g_list = getBM(attributes = attributes, filters = "hgnc_symbol",values = geneList,
mart = mart, uniqueRows = T)
library(dplyr)
converted_g_list = getBM(attributes = attributes, filters = "hgnc_symbol",values = geneList,
mart = mart, uniqueRows = T,useCache = FALSE)
genelist = converted_g_list$entrezgene_id
table1 <- getBM(attributes = c("refsnp_id", "associated_gene"),
filters = "ensembl_gene",
values = genelist,
mart = grch37.snp)
table1 <- getBM(attributes = c("refsnp_id", "associated_gene"),
filters = "ensembl_gene",
values = genelist,
mart = grch37.snp,useCache = FALSE)
View(table1)
grch37.snp = useMart(biomart="ENSEMBL_MART_SNP", host="grch37.ensembl.org", path="/biomart/martservice",dataset="hsapiens_snp")
table1 <- getBM(attributes = c("refsnp_id", "associated_gene"),
filters = "ensembl_gene",
values = genelist,
mart = grch37.snp,useCache = FALSE)
table1
table1 <- getBM(attributes = c("refsnp_id", "associated_gene"),
filters = "ensembl_gene",
values = c("351"),
mart = grch37.snp,useCache = FALSE)
table1
library(XGR)
geneInfo <- getBioMartData(genes, biomart="ENSEMBL_MART_ENSEMBL",
host="grch37.ensembl.org",
path="/biomart/martservice",
dataset="hsapiens_gene_ensembl")
listAttributes()
listAttributes(grch37.snp)
table1 <- getBM(attributes = c("chr_name", "chrom_start","chrom_end"),
filters = "ensembl_gene",
values = c(),
mart = grch37.snp,useCache = FALSE)
table1 <- getBM(attributes = c("chr_name", "chrom_start","chrom_end"),
filters = "ensembl_gene",
values = genelist,
mart = grch37.snp,useCache = FALSE)
listFilters(grch37.snp)
mart2 = useMart(biomart="ENSEMBL_MART_ENSEMBL", host="grch37.ensembl.org", path="/biomart/martservice",dataset="hsapiens_gene_ensembl")
listAttributes(mart2)
attributes = c("chromosome_name","start_position","end_position","strand","ensembl_gene_id")
listFilters(mart2)
listFilters(mart2)
filter = c("external_gene_name")
query2 = getBM(attributes = attributes, filters = filter, values = geneList, mart = mart2, useCache = FALSE)
query2
listAttributes(mart2)
attributes = c("chromosome_name","start_position","end_position","strand","ensembl_gene_id","external_gene_name")
listFilters(mart2)
filter = c("external_gene_name")
query2 = getBM(attributes = attributes, filters = filter, values = geneList, mart = mart2, useCache = FALSE)
query2
query2[-9,]
query2 = query2[-9,]
grch37.snp = useMart(biomart="ENSEMBL_MART_SNP", host="grch37.ensembl.org", path="/biomart/martservice",dataset="hsapiens_snp")
listAttributes(grch37.snp)
listFilters(grch37.snp)
filters = c("chr_name","start","end")
attribute = c("refsnp_id")
input = data.frame("chr_name"=query2$chromosome_name, "start"=query2$start_position, "end"=query2$end_position)
View(input)
table1 <- getBM(attributes = attribute,
filters = filters,
values = input,
mart = grch37.snp,useCache = FALSE)
table1 <- getBM(attributes = attribute,
filters = filters,
values = as.list(input),
mart = grch37.snp,useCache = FALSE)
table1 <- getBM(attributes = attribute,
filters = filters,
values = as.list(input),
mart = grch37.snp,useCache = FALSE)
rsids = c()
rsids = c()
for ( i in 1:nrow(input)){
ress <- getBM(attributes = attribute,
filters = filters,
values = as.list(input[i,]),
mart = grch37.snp,useCache = FALSE)
print(ress)
rsids = c(rsids,ress)
}
rsids = c()
for (i in 1:nrow(input)){
ress <- getBM(attributes = attribute,
filters = filters,
values = as.list(input[i,]),
mart = grch37.snp,useCache = FALSE)
print(i)
rsids = c(rsids,ress)
}
write.table(rsids,"~/Documents/Dr_Yan_Lab/RSID.txt")
rsids = unlink(rsids)
rsids = c()
ll = c()
l1 = c(1,1,1)
append(ll,l1)
ll
rsids = c()
for (i in 1:nrow(input)){
ress <- getBM(attributes = attribute,
filters = filters,
values = as.list(input[i,]),
mart = grch37.snp,useCache = FALSE)
print(i)
rsids = append(rsids,ress$refsnp_id)
}
write.csv(rsids,"~/Documents/Dr_Yan_Lab/RSIDs.csv",quote=F)
